# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: instagram-serverless-app
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  environment:
    PHOTOS_TABLE: Photos-${self:provider.stage}
    USER_ID_INDEX: UserIdIndex
    PHOTOS_S3_BUCKET: instagram-serverless-images-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300
    FOLLOWS_TABLE: Follows-${self:provider.stage}
    FOLLOWERS_INDEX: FollowersIndex
    USER_STATS_TABLE: User-stats-${self:provider.stage}

custom:
  documentation:
    api:
      info:
        version: v0.0.1
        title: Photo Api
        description: Deal with Photo items
    models:
      - name: CreatePhotoRequest
        contentType: application/json
        schema: ${file(models/create-photo-request.json)}

functions:
  GeneratePhotoUploadData:
    handler: src/lambda/http/generatePhotoUploadData.handler
    events:
      - http:
          method: post
          path: photos/upload
          cors: true
    iamRoleStatementsName: ${self:service.name}-generate-upload-data-role-${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:PutObject
        Resource: arn:aws:s3:::${self:provider.environment.PHOTOS_S3_BUCKET}/*
    
  CreatePhoto:
    handler: src/lambda/http/createPhoto.handler
    events:
      - http:
          method: post
          path: photos
          cors: true
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create a new Photo
            description: Create a new Photo
            requestModels:
              application/json: CreatePhotoRequest
    iamRoleStatementsName: ${self:service.name}-create-photo-role-${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.PHOTOS_TABLE}



resources:
  Resources:
    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi
    PhotosDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: photoId
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: photoId
            KeyType: HASH
          - AttributeName: userId
            KeyType: RANGE  
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.PHOTOS_TABLE}
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.USER_ID_INDEX}
            KeySchema:
            - AttributeName: userId
              KeyType: HASH
            - AttributeName: createdAt
              KeyType: RANGE
            Projection:
              ProjectionType: ALL
    FollowDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: createdAt
            KeyType: RANGE  
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.FOLLOWS_TABLE}
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.FOLLOWERS_INDEX}
            KeySchema:
            - AttributeName: followedId
              KeyType: HASH
            - AttributeName: createdAt
              KeyType: RANGE
            Projection:
              ProjectionType: ALL
    UserStatsDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH  
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.USER_STATS_TABLE}
        
    PhotoBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.PHOTOS_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000
    
    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.PHOTOS_S3_BUCKET}/*'
        Bucket: !Ref PhotoBucket


